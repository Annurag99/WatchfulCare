"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
var fs = require("fs");
var standardIndent = '   ';
var commentPrefix = '_';
// tslint:disable-next-line:no-any
var getLocalizationNodeString = function (parentObject, prefix, indent) {
    if (prefix === void 0) { prefix = ''; }
    if (indent === void 0) { indent = standardIndent; }
    var keys = __spreadArray([], Object.keys(parentObject)
        .filter(function (s) { return s.substr(0, 1) !== commentPrefix; }), true);
    keys.sort();
    var entries = keys.map(function (key) {
        var childEntry = parentObject[key];
        if (typeof (childEntry) === 'string') {
            return prefix === '' ?
                "".concat(indent, "public static ").concat(key, " = \"").concat(key, "\";\r\n") :
                "".concat(indent).concat(key, " : \"").concat(prefix).concat(key, "\",\r\n");
        }
        else {
            var contents = getLocalizationNodeString(childEntry, prefix + key + '.', indent + standardIndent);
            return prefix === '' ?
                "".concat(indent, "public static ").concat(key, " = {\r\n").concat(contents).concat(indent, "};\r\n") :
                "".concat(indent).concat(key, " : {\r\n").concat(contents).concat(indent, "},\r\n");
        }
    });
    return entries.join('');
};
try {
    var localeFileLocation = './src/localization/locales/en.json';
    var keyDefinitionFile = './src/localization/resourceKeys.ts';
    var localeFileContents = fs.readFileSync(localeFileLocation, 'utf-8');
    var localeFileObject = JSON.parse(localeFileContents);
    var nodes = getLocalizationNodeString(localeFileObject);
    var keyDefinitionFileContents = "//// This code is generated by a tool\n/* tslint:disable */\nexport class ResourceKeys {\r\n ".concat(nodes, "}\n/* tslint:enable */\n");
    fs.writeFileSync(keyDefinitionFile, keyDefinitionFileContents);
    // tslint:disable-next-line:no-console
    console.log('Localization keys transcribed to ResourceKeys.ts');
}
catch (exception) {
    // tslint:disable-next-line:no-console
    console.log("Failed to generate localization keys ".concat(exception));
}
